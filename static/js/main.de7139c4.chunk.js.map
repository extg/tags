{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Input","p","parseTags","tags","Array","isArray","toLocaleLowerCase","toLowerCase","replace","split","filter","Boolean","App","value","cb","useState","inputA","setInputA","inputB","setInputB","isCopyied","setIsCopyied","handleChange","e","target","result","map","b","flatMap","a","join","handleClick","setTimeout","useCallback","event","stopPropagation","writeText","className","as","rows","variant","onChange","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAMA,SAASA,EAAMC,GACb,OAAO,wCAAcA,IAGhB,SAASC,EAAUC,GACxB,OAAIC,MAAMC,QAAQF,GACTA,EAGDA,GAAwB,kBAATA,EACrBA,EACGG,oBACAC,cACAC,QAAQ,4BAAmB,MAC3BC,MAAM,iBACNC,OAAOC,SACV,GAkDWC,MAlCf,WAAgB,IAZaC,EAAYC,EAY1B,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAIqBJ,oBAAS,GAJ9B,mBAINK,EAJM,KAIKC,EAJL,KAOPC,EAAe,SAAAR,GAAE,OAAI,SAAAS,GAAC,OAAIT,EAAGS,EAAEC,OAAOX,SAEtCY,EAAS,sBACVvB,EAAUc,GAAQU,KAAI,SAAAC,GAAC,iBAAQA,OADrB,YAEVzB,EAAUgB,GAAQQ,KAAI,SAAAC,GAAC,iBAAQA,OAFrB,YAGVzB,EAAUc,GAAQY,SAAQ,SAAAC,GAAC,OAAI3B,EAAUgB,GAAQQ,KAAI,SAAAC,GAAC,iBAAQE,GAAR,OAAYF,WACrEjB,OAAOC,SAASmB,KAAK,KAEjBC,GA3BqBlB,EA2BMY,EA3BMX,EA2BE,WACvCO,GAAa,GAEbW,YAAW,kBAAMX,GAAa,KAAQ,MA7BxCY,uBACE,SAACC,GACM,OAALA,QAAK,IAALA,KAAOC,kBAEPC,YAAUvB,GAEVC,GAAoB,oBAAPA,GAAqBA,GAAG,KAEvC,CAACD,KAwBH,OACE,sBAAKwB,UAAU,MAAf,UACE,2CACA,cAACrC,EAAD,CAAOsC,GAAG,WAAWC,KAAM,EAAGC,QAAQ,UAAU3B,MAAOG,EAAQyB,SAAUnB,EAAaL,KACtF,cAACjB,EAAD,CAAOsC,GAAG,WAAWC,KAAM,EAAGC,QAAQ,UAAU3B,MAAOK,EAAQuB,SAAUnB,EAAaH,KAEtF,cAACnB,EAAD,CAAOsC,GAAG,WAAWC,KAAM,GAAI1B,MAAOY,EAAQe,QAAQ,YAEtD,wBAAQE,QAASX,EAAjB,SAAgCX,EAA4B,qEAAhB,2ECrDnCuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.de7139c4.chunk.js","sourcesContent":["import React, {useState, useCallback} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { writeText } from 'clipboard-polyfill'\n\n\nfunction Input(p: any) {\n  return <textarea {...p}/>\n}\n\nexport function parseTags(tags: string | string[]): string[] {\n  if (Array.isArray(tags)) {\n    return tags\n  }\n\n  return (tags && typeof tags === 'string') ?\n    tags\n      .toLocaleLowerCase()\n      .toLowerCase()\n      .replace(/#?([a-zа-я_]+)/g, '$1')\n      .split(/\\s*,+\\s*|\\s+/g)\n      .filter(Boolean) :\n    []\n}\n\n\nexport const useClipboard = (value: any, cb: any) =>\n  useCallback(\n    (event) => {\n      event?.stopPropagation()\n\n      writeText(value)\n\n      cb && typeof cb === 'function' && cb(true)\n    },\n    [value]\n  )\n\nfunction App() {\n  const [inputA, setInputA] = useState('')\n  const [inputB, setInputB] = useState('')\n\n  const [isCopyied, setIsCopyied] = useState(false)\n\n  // @ts-expect-error\n  const handleChange = cb => e => cb(e.target.value)\n\n  const result = [\n    ...parseTags(inputA).map(b => `#${b}`),\n    ...parseTags(inputB).map(b => `#${b}`),\n    ...parseTags(inputA).flatMap(a => parseTags(inputB).map(b => `#${a}${b}`))\n  ].filter(Boolean).join(' ')\n\n  const handleClick = useClipboard(result, () => {\n    setIsCopyied(true)\n\n    setTimeout(() => setIsCopyied(false), 2000)\n  })\n\n  return (\n    <div className='App'>\n      <h2>#hashtags</h2>\n      <Input as='textarea' rows={3} variant='outline' value={inputA} onChange={handleChange(setInputA)} />\n      <Input as='textarea' rows={3} variant='outline' value={inputB} onChange={handleChange(setInputB)} />\n\n      <Input as='textarea' rows={10} value={result} variant='outline'/>\n\n      <button onClick={handleClick}>{!isCopyied ? 'Скопировать' : 'Скопировано'}</button>\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}